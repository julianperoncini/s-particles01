{"id":"shaders/frag.glsl","dependencies":[{"name":"/Applications/MAMP/htdocs/dev/particles-glsl/particles-01/package.json","includedInParent":true,"mtime":1621551395142}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nuniform float time;\\nuniform vec2  resolution;\\nuniform float intensity;\\nuniform vec3  color;\\n\\nvarying vec2 vUv;\\n\\n#define PI 3.14159265358979323846\\n\\nint number = 40;\\nfloat size = 0.04;\\nfloat minSize = 0.3;\\n\\nfloat rand(vec2 co) {\\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\\n}\\n\\nfloat rand(vec2 co, float l) {\\n    return rand(vec2(rand(co), l));\\n}\\n\\nfloat rand(vec2 co, float l, float t) {\\n    return rand(vec2(rand(co, l), t));\\n}\\n\\nfloat wrap(float x, float min) {\\n    return abs(mod(x, 2.0) - 1.0) + min;\\n}\\n\\nfloat particle(vec2 p, float fx, float fy, float ax, float ay) {\\n    vec2 r;\\n    r = vec2(p.x + cos(time * fx) * 3. * ax * 1.0, p.y + sin(time * fy) * 1.5 * ay * 1.0);\\n    return ( size * wrap( time * ax, minSize ) ) / length(r);\\n}\\n\\nvoid main() {\\n\\n    vec2 q = gl_FragCoord.xy / resolution.xy;\\n    vec2 p = (4.0 * q) - 3.;\\n    p.x *= resolution.x / resolution.y;\\n\\n    float col = 0.0;\\n    float counter = 0.0;\\n\\n    for(int i = 0; i < number; i++) {\\n      col += particle(p, rand(vec2(counter)), rand(vec2(counter), 1.0, 50.0), counter, counter);\\n      counter += 0.1;\\n    }\\n\\n    gl_FragColor.rgb = vec3(col) * color * intensity;\\n}\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"shaders/frag.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"shaders/frag.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"shaders/frag.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"shaders/frag.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"shaders/frag.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":1248},"source":"shaders/frag.glsl","original":{"line":1,"column":0}}],"sources":{"shaders/frag.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform float time;\\nuniform vec2  resolution;\\nuniform float intensity;\\nuniform vec3  color;\\n\\nvarying vec2 vUv;\\n\\n#define PI 3.14159265358979323846\\n\\nint number = 40;\\nfloat size = 0.04;\\nfloat minSize = 0.3;\\n\\nfloat rand(vec2 co) {\\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\\n}\\n\\nfloat rand(vec2 co, float l) {\\n    return rand(vec2(rand(co), l));\\n}\\n\\nfloat rand(vec2 co, float l, float t) {\\n    return rand(vec2(rand(co, l), t));\\n}\\n\\nfloat wrap(float x, float min) {\\n    return abs(mod(x, 2.0) - 1.0) + min;\\n}\\n\\nfloat particle(vec2 p, float fx, float fy, float ax, float ay) {\\n    vec2 r;\\n    r = vec2(p.x + cos(time * fx) * 3. * ax * 1.0, p.y + sin(time * fy) * 1.5 * ay * 1.0);\\n    return ( size * wrap( time * ax, minSize ) ) / length(r);\\n}\\n\\nvoid main() {\\n\\n    vec2 q = gl_FragCoord.xy / resolution.xy;\\n    vec2 p = (4.0 * q) - 3.;\\n    p.x *= resolution.x / resolution.y;\\n\\n    float col = 0.0;\\n    float counter = 0.0;\\n\\n    for(int i = 0; i < number; i++) {\\n      col += particle(p, rand(vec2(counter)), rand(vec2(counter), 1.0, 50.0), counter, counter);\\n      counter += 0.1;\\n    }\\n\\n    gl_FragColor.rgb = vec3(col) * color * intensity;\\n}\";"},"lineCount":null}},"error":null,"hash":"eb60b671992c8caed3d85a3dfc750a7a","cacheData":{"env":{}}}